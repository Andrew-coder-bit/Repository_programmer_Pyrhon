"""
Одной из сущностей, для которой можно реализовать наследование, является класс "Питомец".
Питомец может быть различных типов, например, собака, кошка, птица.
Пример класса "Питомец":
"""
class Pet:
    def __init__(self, name: str, age: int, breed: str):
        """
        Конструктор класса Pet.

        Аргументы:
        - name: str - имя питомца.
        - age: int - возраст питомца.
        - breed: str - порода питомца.
        """
        self.name = name
        self.age = age
        self.breed = breed

    def speak(self) -> str:
        """
        Метод, который позволяет питомцу издавать звуки.

        Возвращает:
        - str - строку с издаваемым звуком.
        """
        return " "

    def __str__(self) -> str:
        """
        Магический метод, возвращающий информацию о питомце в виде строки.

        Возвращает:
        - str - строку с информацией о питомце.
        """
        return f"Name: {self.name}, Age: {self.age}, Breed: {self.breed}"

"""
Классы-наследники, такие как "Собака", "Кошка" и "Птица", могут унаследовать конструктор базового класса 
и расширить его своими собственными атрибутами:
"""

class Dog(Pet):
    def __init__(self, name: str, age: int, breed: str, size: str):
        """
        Конструктор класса Dog.

        Аргументы:
        - name: str - имя собаки.
        - age: int - возраст собаки.
        - breed: str - порода собаки.
        - size: str - размер собаки (маленькая, средняя, большая).
        """
        super().__init__(name, age, breed)
        self.size = size

    def bark(self) -> str:
        """
        Метод, позволяющий собаке лаять.

        Возвращает:
        - str - строку с звуком лая.
        """
        return "Woof!"

    def __str__(self) -> str:
        """
        Магический метод, возвращающий информацию о собаке в виде строки.

        Возвращает:
        - str - строку с информацией о собаке.
        """
        return f"Name: {self.name}, Age: {self.age}, Breed: {self.breed}, Size: {self.size}"

"""
класс "Собака" является дочерним классом для базового класса "Питомец". 
В классе "Собака" перегружен метод str, чтобы предоставлять более детальную информацию о собаке. 
Метод bark также был расширен и предоставляет конкретный звук для собаки (лаять).

Аналогично можно реализовать дочерние классы "Кошка" и "Птица", 
унаследовав и расширив конструктор базового класса и перегрузив необходимые методы.
"""



if __name__ == "__main__":
    # Write your solution here
    pass
